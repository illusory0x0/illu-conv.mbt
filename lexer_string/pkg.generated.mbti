// Generated using `moon info`, DON'T EDIT IT
package "illusory0x0/lexer/lexer_string"

// Values
fn[T] base_err() -> T raise StrConvError

let base_err_str : String

fn[T] range_err() -> T raise StrConvError

let range_err_str : String

fn[T] syntax_err() -> T raise StrConvError

let syntax_err_str : String

fn[A : FromStringView] tokenize(String) -> (A, Int) raise StrConvError

fn tokenize_bool(StringView) -> (Bool, Int) raise StrConvError

fn tokenize_double(StringView) -> (Double, Int) raise StrConvError

fn tokenize_int(StringView, base? : Int) -> (Int, Int) raise StrConvError

fn tokenize_int64(StringView, base? : Int) -> (Int64, Int) raise StrConvError

fn tokenize_uint(StringView, base? : Int) -> (UInt, Int) raise StrConvError

fn tokenize_uint64(StringView, base? : Int) -> (UInt64, Int) raise StrConvError

// Errors
pub(all) suberror StrConvError String
impl Show for StrConvError

// Types and methods

// Type aliases

// Traits
pub(open) trait FromStringView {
  tokenize(StringView) -> (Self, Int) raise StrConvError
}
impl FromStringView for Bool
impl FromStringView for Int
impl FromStringView for Int64
impl FromStringView for UInt
impl FromStringView for UInt64
impl FromStringView for Double

